name: Stock Check with Screenshot

on:
  schedule:
    - cron: "0 * * * *"   # 매 시간마다 실행
  workflow_dispatch:

jobs:
  check-stock:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install axios @slack/webhook puppeteer

      - name: Check stock status and send Slack notification
        run: |
          const axios = require("axios");
          const { IncomingWebhook } = require("@slack/webhook");
          const puppeteer = require("puppeteer");

          (async () => {
            const url = "https://example.com/product"; // 상품 페이지
            const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL;
            const webhook = new IncomingWebhook(slackWebhookUrl);

            // Puppeteer 실행
            const browser = await puppeteer.launch({ headless: true });
            const page = await browser.newPage();
            await page.goto(url, { waitUntil: "networkidle2" });

            // 스크린샷 찍기
            await page.screenshot({ path: "screenshot.png" });

            // 품절 상태 크롤링 (예: 특정 셀렉터)
            const status = await page.$eval(".stock-status", el => el.innerText.trim());

            let message;
            if (status !== "입고") {
              message = `❌ 품절 상태입니다. (${status})`;
            } else {
              message = `✅ 입고 상태입니다. (${status})`;
            }

            await browser.close();

            // 스크린샷과 함께 Slack 전송
            const FormData = require("form-data");
            const fs = require("fs");
            const form = new FormData();
            form.append("file", fs.createReadStream("screenshot.png"));
            form.append("channels", "#재고알림");
            form.append("initial_comment", message);

            await axios.post("https://slack.com/api/files.upload", form, {
              headers: {
                Authorization: `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                ...form.getHeaders(),
              },
            });
          })();
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
